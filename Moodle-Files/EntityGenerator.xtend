/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.xtext.example.mydsl.entity.Entity
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.example.mydsl.entity.Feature
import com.google.inject.Inject

//import org.eclipse.xtext.generator.IGenerator
//import org.eclipse.xtext.generator.IFileSystemAccess

import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
 
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
//class EntityGenerator implements IGenerator {
class EntityGenerator extends AbstractGenerator {

 	@Inject extension IQualifiedNameProvider

//    override void doGenerate(Resource resource, IFileSystemAccess fsa) {
	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        for (e : resource.allContents.toIterable.filter(Entity)) {
       	 fsa.generateFile(
            e.fullyQualifiedName.toString("/") + ".java",
            e.compile)          
        }
	}

	def compile(Entity e)'''
		public class «e.name» {
			«FOR f : e.features»
			 	«f.compile»
			«ENDFOR»
		}
	'''
	
	def compile(Feature f)'''
		private «f.type.fullyQualifiedName» «f.name»;
		
		public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
			return «f.name»
		}
		
		public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
			this.«f.name» = «f.name»;
		}

'''

	
}
